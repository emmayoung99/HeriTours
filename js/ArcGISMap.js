/*
Version     Date            Coder       Comments
1.0.0       2024-03-27      AGibbs      Initial. Converted from googleAPI to ArcGIS functions, add current location function, clear map function,
1.0.1       2024-03-28      TBaxter     Added Popup content
1.0.2       2024-03-29      AGibbs      Added scale bar and compass and frame constraint, bike, transit and buildings layers
1.0.2       2024-03-29      AGibbs      Added scale bar and compass and frame constraint
1.0.3       2024-03-30      AGibbs      Styled feature layers and added a legend
2.0.0       2024-03-30      TBaxter     Added Route. removed click event and changed to combo box (so it would only use visible site coordinates)
                                        Editd ClearMap function to include combo boxes and route components, Added Current location to combo box
                                        Route currently only allows for single destination. 
2.2.0       2024-03-31      AGibbs      Convert feature layers to checkbox (only visible when clicked), styled transit layer per individual route, filter some buildings out from buildings feature layer, add a home button to return to original extent
2.3.0       2024-04-01      TBaxter     Added optional stops in AddSelLoc, created functions AddStop and RemoveStop, added to ClearMap
2.3.1       2024-04-01      AGibbs      Changed legend to cards and collapsible widget
2.4.0       2024-04-01      AGibbs      Made buttons selectable only once to avoid duplicate points; refreshes with the clear map button
2.4.1       2024-04-02      EYOUNG      Modified the ClearMap function. Buttons will now return to their default appearance on click. Also added many comments for readability.
2.5.0       2024-04-02      EYOUNG      Added function to take the users current location and insert it as the first point in the array for the route. Converted directions from miles to km manually.
2.6.0       2024-04-04      HMusni      Created a global variable for selected site arrays. Added an event listener for each 'Number of Stops' button. Added a DoneSelection() function to support the 'Number of Stops' selection filter.
2.6.1       2024-04-07      AGibbs      Altered toggle boxes to remove initial selection


*** Add travelmode to routes


*/


require(["esri/config", "esri/Map", "esri/views/MapView", "esri/Graphic", "esri/layers/GraphicsLayer", "esri/widgets/Locate", "esri/widgets/Home", "esri/widgets/ScaleBar",
    "esri/widgets/Compass", "esri/widgets/Legend", "esri/widgets/LayerList", "esri/rest/route", "esri/rest/support/RouteParameters", "esri/rest/support/FeatureSet", "esri/layers/FeatureLayer",
    "esri/widgets/Expand", "esri/rest/support/Query"],
    function (esriConfig, Map, MapView, Graphic, GraphicsLayer, Locate, Home, ScaleBar, Compass, Legend, LayerList, route, RouteParameters, FeatureSet, FeatureLayer, Expand, Query) {

        // Set the API key for authentication
        esriConfig.apiKey = "AAPK2814bdda61534a3aa9df296ba41b7c00KDJxD9KRkEhwMLrd-lIzZd5c_PoyiTb81_inphNdo5Q4XEQbluYCNr15smMhFbtD";

        // Add buildings layer 
        const buildingRender = {
            type: "simple",
            symbol: {
                type: "simple-fill",
                color: "#9F1B04",
                style: "solid",
                outline: {
                    width: "0.5px",
                    color: "#6D0D4D"
                }
            }
        };

        // Create a new feature layer for buildings with specified properties
        const buildings = new FeatureLayer({
            url: "https://services.arcgis.com/rYz782eMbySr2srL/arcgis/rest/services/Buildings/FeatureServer/8",
            title: "Buildings",
            renderer: buildingRender,
            listMode: "hide",
            // Define expression to filter specific OBJECTIDs
            definitionExpression: "OBJECTID IN ('232','475','544','648','674','726','727','868','874','1076','1084','1186','1197','1203','1326','1371','1444','1846','1924','1941','1942','1964','1988','2025','2152','2306','2367','2536','2542','2631','2669','2725','2729','2738','2762','2774','2809','2841','2852','2873','2902','2910','2925','2981','3056','3079','3126','3158','3161','3197','3293','3309','3311','3314','3315','3317','3355','3410','3428','3431','3435','3443','3452','3479','3496','3498','3541','3722','4037','4131','4158','4165','4308','4433','4485','4549','4559','4771','4798','4828','4834','4865','5017','5050','5079','5091','5135','5139','5191','5197','5219','5376','5415','5417','5568','5626','5646','5669','5951','5960','5983','6041','6103','6107','6110','6131','6185','6186','6188','6189','6359','6395','6586','6622','6660','6710','6711','6730','6743','7130','7149','7159','7192','7265','7268','7575','7577','7599','7701','7765','7766','7937','8066','8104','8160','8269','8307','8484','8485','8600','8649','8666','9280','9445','9615','9629','9657','9834','9863','10658','11037','11860','11876','12188','12256','12355','12608','12744','12755','12840','13025','13099','13466','13628','13862','13863','14081','14185','14226','14233','14234','14235','14259','14314','14336','14339','14376','14508','14583','14790','14793','14947','15132','15135','15286','15476','15689','15741','15910','15956','16052','16153','16155','16171','16529','16615','16619','16790','16803','16804','16948','17047','17164','17165','17614','17650','17685','18137','18147','18186','18261','18271','18277','18291','18392','18434','18460','18461','18462','18557','18561','18600','18621','18630','18688','18695','18727','18740','18762','18791','18802','18966','19199','19253','19297','19305','19313','19320','19326','19331','19354','19420','19518','19519','19521','19613','19708','19737','19838','19894','20068','20069','20347','20384','20388','20410','20454','20558','20566','20669','20672','20706','20779','20780','20882','20967','21077','21224','21248','21281','21347','21348','21350','21354','21355','21457','21462','21482','21491','21493','21630','21632','21633','21711','21747','21816','21888','21917','21968','22017','22101','22104','22155','22203','22233','22331','22332','22449','22464','22473','22649','22731','22774','22802','22824','22829','22837','22910','22960','23040','23046','23084','23095','23137','23141','23277','23281','23293','23342','23411','23672','23674','23675','23747','23767','23837','23848','23903','23935','23995','24243','24299','24394','24531','24583','24635','24654','24909','25006','25154','25155','25257','25489','25628','25834','25945','26520','26701','26749','26774','26815','26890','26891','26925','26967','26972','27042','27305','27403','27404','27407','27418','27506','27827','27828','27936','28111','28114','28145','28379','28509','28511','28542','28543','28545','28605','28606','28777','28879','28903','28975','28988','28990','29092','29121','29329','29364','29478','29495','29533','29565','29805','29875','29998','30058','30073','30096','30097','30098','30163','30165','30199','30201','30231','30232','30238','30271','30306','30307','30326','30549','30552','30586','30589','30592','30600','30696','30754','30763','30876','30928','30960','31038','31040','31041','31044','31059','31062','31072','31138','31168','31183','31211','31212','31221','31222','31243','31245','31336','31401','31433','31449','31482','31501','31529','31559','31604','31625','31627','31666','31804','31806','31905','31987','31993','32015','32025','32175','32247','32249','32253','32254','32255','32256','32257','32341','32350','32351','32384','32435','32437','32439','32495','32520','32529','32538','32539','32540','32569','32584','32587','32588','32630','32653','32784','32878','32891','32894','32899','32911','32984','33022','33153','33179','33180','33181','33251','33593','33802','33817','33826','33840','33841','33879','33881','33886','34031','34039','34065','34095','34096','34098','34167','34173','34181','34219','34222','34224','34225','34229','34233','34234','34285','34352','34370','34371','34372','34434','34512','34515','34537','34556','34656','34682','34706','34710','34801','34849','34855','34969','35067','35090','35091','35133','35148','35174','35175','35179','35180','35182','35213','35221','35275','35289','35455','35472','35477','35489','35507','35586','35674','35679','35680','35683','35684','35715','35735','35758','35760','35763','35769','35798','35838','35919','36022','36029','36099','36173','36174','36201','36379','36386','36506','36586','36601','36614','36616','36734','36735','36791','36827','36828','36829','36834','36837','36839','36980','37073','37120','37137','37371','37390','37440','37450','37509','37510','37560','37561','37803','38162','38345','38416','38428','38768','38864','38866','38872','38873','39110','39155','39289','39383','39384','39385','39388','39546','39549','39551','39552','39774','39814','39820','39828','39833','39960','39973','39974','39976','40060','40207','40410','40677','40756','40757','40758','40962','40997','40999','41002','41043','41045','41347','41358','41360','41362','41411','41485','41521','41546','41548','41549','41552','41564','41568','41821','41822','41845','41847','41854','41873','41878','41915','41986','42009','42089','42093','42096','42148','42152','42155','42174','42175','42181','42183','42256','42435','42446','42449','42462','42477','42478','42577','42581','42582','42609','42645','42646','42696','42697','42870','42872','42918','43009','43089','43139','43207','43237','43239','43241','43244','43245','43247','43248','43249','43250','43287','43301','43328','43329','43330','43385','43419','43422','43504','43552','43556','43558','43566','43570','43658','43665','43666','43671','43680','43729','43730','43731','43791','44026','44093','44094','44123','44131','44133','44134','44135','44216','44217','44218','44333','44358','44359','44373','44374','44408','44470','44471','44497','44504','44512','44518','44519','44520','44521','44522','44525','44526','44533','44534','44536','44537','44538','44550','44561','44563','44564','44565','44566','44601','44613','44615','44631','44632','44636','44637','44638','44639','44640','44723','44805','44809','44816','44864','44870','44894','44906','44907','44935','44948','44953','44956','44964','44965','45012','45062','45063','45064','45212','45422','45549','45599','45613','45639','45775','45952','45987','45988','46150','46156','46164','46237','46289','46296','46298','46504','46506','46517','46552','46615','46659','46708','46723','46735','46747','46790','46846','46847','46848','46856','46859','46955','47009','47034','47059','47068','47072','47098','47124','47131','47201','47403','47404','47469','47473','47497','47498','47593','47594','47595','47596','47640','47947','48022','48025','48094','48109','48140','48142','48223','48243','48245','48271','48272','48307','48313','48360','48362','48370','48371','48374','48439','48454','48468','48469','48470','48476','48517','48564','48566','48591','48615','48836','48941','48942','48943','48944','48981','49107','49411','50025','50087','50635','51958','52061','52062','52152','52667','53204','53291','53292','53426','53427','53739','54357','54984','56451','56452','56527','56942','56943','56996','56998','57063','57582','57583','58053','58054','58055','58056','58221','58635','58643','58644','58698','59234','60064','60133','60349','60653','60767','60820','61305','61664','61700','63195','63474','63553','64041','64058','64059','64060','64061','64069','64143','64506','64507','64651','64712','64713','65191','65373','65849','66136','66147','66159','66404','66425','66426','66466','66804','66805','66806','66932','67134','67474','67544','68009','68079','68452','68574','68577','68922','69099','69127','69765','69990','70143','70434','70706','70726','70733','71177','71392','72155','72912','73014','73189','73257','73543','73705','73797','74143','74288','74953','75156','75307','75409','75532','76779','77090','77199','78051','78708','78883','79225','79582','79630','79828','79954','79988','80301','80459','82437','82696','83001','83033','85493','86666','87005','87062','87250','87264','87818','87854','88221','88725','88960','89490','89549','89593','89830','89998','91400','92197','92855','93205','94537','98181','99026','99346','99741','100393','100516','101729','103675','104243','104604','104660','106242','106328','107149','107170','107351','107695','109087','109188','110397','111564','111605','112151','112828','112864','112963','114185','114607','114954','115028','115151','115455','115456','115457','116151','116171','116193','116286','116287','116532','116554','116557','116646','116885','117048','117160','117386','117620','117683','117784','117869','118138','118344','118345','118351','119203','119336','119337','119353','119542','119544','119748','119958','120042','120063','120422','120779','120780','120781','120896','121181','121630','121668','121669','121670','121728','121729','121863','122309','122683','123050','123097','123355','123461','123696','123713','124380','124398','124635','125986','126138','126165','126714','126925','127199','127247','127262','127263','127278','127605','127606','127736','127738','128245','128962','128963','129056','129119','129337','129588','129842','129991','130278','130415','130528','130570','130571','131135','131136','131246','131294','131998','131999','132273','132274','132283','132287','132479','132480','132483','132818','132819','132965','133013','133142','133157','133221','133276','133277','133278','133372','133373','133488','133545','133547','133613','133614','133698','133699','133700','133856','134007','134008','134129','134172','134181','134186','134189','134212','134231','134238','134383','134550','134563','134565','134616','134627','134631','134672','134679','134683','134733','134814','134815','134816','134818','134858','134867','134869','134918','135118','135253','135529','135604','135654','135777','135808','135932','136269','136382','136409','136495','136728','136827','136829','137031','137032','137095','137105','137112','137157','137267','137291','137324','137325','137326','137329','137332','137333','137702','137866','137867','138050','138102','138104','138105','138183','138184','138215','138231','138242','138357','138358','138359','138360','138361','138428','138467','138808','138977','139108','139225','139227','139277','139332','139333','139383','139444','139640','139691','139693','139694','139695','139696','139697','139699','139852','139857','139908','139939','139940','139941','139943','139963','139964','140036','140037','140038','140040','140103','140104','140115','140116','140117','140186','140187','140188','140294','140449','140469','140653','140676','140719','140769','140800','140816','140819','140834','140937','140975','140977','141012','141019','141021','141025','141065','141111','141112','141113','141194','141205','141214','141238','141300','141303','141304','141317','141373','141374','141375','141378','141379','141380','141381','141404','141405','141410','141480','141482','141626','141628','141676','141697','141762','141865','142039','142040','142053','142054','142055','142056','142126','142183','142299','142322','142324','142325','142326','142327','142328','142382','142401','142402','142403','142434','142502','142520','142521','142522','142523','142556','142600','142601','142623','142645','142727','142729','142745','142746','142823','142826','142829','142830','142834','142938','143082','143083','143118','143119','143379','143580','143661','143704','143785','143786','143787','143837','143840','143841','143863','143982','144577','144578','144619','144752','144855','145002','145029','145032','145038','145039','145046','145047','145212','145218','145219','145255','145274','145280','145281','145282','145287','145289','145293','145296','145297','145298','145301','145313','145371','145500','145501','145502','145518','145519','145538','145545','145546','145547','145601','145631','145675','145701','145702','145703','145801','145802','145803','145805','145809','145814','145832','145833','145834','145872','146062','146107','146108','146109','146114','146116','146177','146205','146345','146373','146379','146381','146424','146450','146452','146455','146478','146479','146495','146515','146517','146523','146653','146656','146658','146745','146764','146777','146778','146782','146792','146793','147042','147146','147195','147221','147254','147304','147305','147307','147310','147326','147401','147428','147498','147521','147543','147549','147675','147754','147755','147756','148018','148022','148269','148270','148274','148389','148473','148494','148518','148580','148583','148588','148606','148607','148611','148612','148614','148615','148716','148724','148737','148781','148786','148835','148839','148840','148841','148842','148844','148850','148891','148893','148895','148896','148897','148898','148900','148901','148904','148906','148907','148909','148911','148914','148980','148981','148984','148992','149003','149030','149032','149040','149041','149049','149094','149096','149100','149134','149136','149146','149148','149149','149155','149160','149161','149191','149196','149221','149224','149252','149267','149294','149308','149310','149322','149340','149347','149353','149359','149392','149397','149433','149494','149495','149496','149505','149550','149566','149567','149605','149606','149652','149654','149656','149657','149658','149671','149713','149742','149747','149749','149753','149755','149780','149805','149807','149813','149814','149820','149851','149852','149853','149855','149856','149903','149909','149944','149953','149954','149961','149962','149963','149965','150060','150090','150091','150092','150110','150111','150139','150141','150144','150146','150147','150153','150156','150157','150158','150160','150162','150167','150169','150236','150237','150248','150253','150259','150262','150264','150268','150274','150345','150353','150357','150393','150395','150396','150408','150411','150443','150451','150456','150457','150459','150472','150500','150599','150600','150619','150624','150626','150655','150664','150672','150673','150674','150676','150685','150689','150692','150698','150704','150705','150779','150789','150790','150793','150795','150796','150799','150803','150805','150806','150812','150815','150816','150817','150819','150828','150835','150838','150842','150859','150862','150868','150873','150880','150896','150897','150916','150957','150998','151010','151015','151016','151021','151022','151023','151029','151036','151038','151039','151041','151056','151086','151087','151090','151091','151095','151096','151100','151108','151109','151112','151124','151130','151197','151199','151227','151230','151233','151248','151261','151263','151267','151269','151277','151278','151290','151296','151298','151304','151306','151338','151339','151345','151361','151365','151366','151442','151452','151457','151459','151462','151464','151471','151472','151501','151503','151524','151531','151554','151556','151563','151564','151565','151567','151585','151597','151599','151600','151609','151659','151663','151666','151670','151672','151674','151677','151680','151684','151688','151690','151691','151696','151699','151700','151704','151705','151709','151746','151756','151758','151759','151761','151762','151769','151772','151777','151778','151784','151789','151876','151880','151882','151883','151885','151887','151891','151901','151905','151906','151907','151913','151934','151964','151965','151975','151982','151983','151987','151989','151994','151995','151996','152067','152072','152075','152080','152087','152088','152089','152092','152098','152155','152159','152163','152164','152167','152169','152184','152185','152189','152195','152199','152203','152207','152209','152210','152213','152214','152217','152244','152262','152269','152307','152332','152334','152341','152354','152357','152360','152374','152398','152413','152415','152420','152424','152425','152428','152431','152433','152439','152442','152449','152464','152506','152507','152508','152510','152523','152546','152581','152616','152617','152631','152632','152641','152648','152650','152651','152671','152675','152676','152714','152716','152718','152757','152782','152793','152804','152806','152832','152880','152892','152905','152909','152922','152924','152925','152929','152945','152959','152960','152962','153022','153027','153028','153032','153033','153038','153102','153105','153107','153215','153217','153274','153312','153325','153329','153330','153342','153371','153375','153382','153383','153418','153424','153430','153431','153437','153441','153450','153488','153489','153505','153510','153517','153521','153539','153544','153557','153569','153586','153588','153594','153606','153610','153626','153630','153631','153636','153696','153719','153721','153725','153737','153750','153795','153801','153802','153805','153820','153822','153826','153828','153830','153849','153850','153910','153912','153926','153928','154081','154082','154104','154105','154115','154116','154121','154133','154136','154156','154158','154160','154168','154171','154172','154174','154176','154194','154196','154197','154201','154208','154209','154212','154252','154253','154440','154441','154445','154447','154448','154450','154480','154482','154485','154487','154507','154509','154510','154512','154515','154559','154561','154562','154564','154588','154595','154602','154604','154605','154606','154608','154652','154656','154664','154684','154736','154780','154781','154873','154875','154877','154880','154882','154900','154901','154903','154905','154908','154911','154968','154969','154974','154986','154988','154990','154996','154998','155000','155005','155038','155051','155107','155141','155152','155228','155252','155268','155271','155273','155276','155278','155281','155282','155343','155344','155468','155470','155471','155475','155478','155485','155486','155555','155567','155575','155660','155860','155867','155868','155896','155898','155983','155986','156188','156214','156250','156252','156253','156254','156255','156256','156260','156360','156365','156462','156565','156567','156574','156593','156620','156686','156687','156690','156701','156791','156797','156798','156810','156901','156908','157380','157385','157387','157388','157397','157398','157439','157440','157501','157502','157505','157506','157644','157865','157871','157878','157982','157984','158115','159561','159562','159620','160011','160116','160141','160354','160615','160973','161113','161991','162023','162110','162169','162332','162399','162400','162485','162501','162694','163076','163081','163190','163359','163810','163870','163977','164043','164129','164810','164822','165246','165285','165315','166225','166649','166653','166679','166893','166909','166983','167787','168855','169318','169436','169437','169686','169720','169726','169733','169743','169844','169845','169846','170005','170007','170009','170014','170015','170016','170070','170127','170130','170148','170150','170151','170186','170188','170679','170850','170866','170869','170871','170872','170876','170966','170971','170972','171007','171047','171100','171223','172390','173103','173109','173377','173480','173586','173600','173605','173761','173801','173883','173949','174158','174226','174359','174451','174516','174560','174561','174562','174579','174636','174665','174666','174667','174668','174669','174670','174819','174821','174826','174971','175009','175039','175043','175089','175110','175293','175370','175372','175437','175445','175448','175449','175461','175557','175702','175825','175926','176284','176412','176483','176962','176988','177550','177795','178049','178186','178494','178498','178502','178763','178767','178955','179022','179025','179100','179108','179116','179191','179192','179272','179273','179297','179298','179335','179336','179337','179377','179380','179544','179550','179584','179595','179596','179597','179598','179913','179919','179988','180018','180027','180039','180130','180231','180232','180539','180760','180763','180823','180845','180931','181144','181145','181207','181209','181579','182903','183230','183939','184078','184432','184552','184573','184674','185292','185294','185296','185542','185543','185612','185775','185776','186375','186402','186545','187120','187145','187158','187247','187376','187385','187460','187593','187610','187657','187742','187775','187808','187894','187942','188024','188088','188137','188145','188151','188343','188527','188570','188705','188713','188721','188737','188829','188933','189007','189048','189127','189138','189231','189283','189476','189522','189534','189578','189614','189655','189704','189736','189920','189953','189978','189979','189981','190043','190052','190165','190199','190257','190297','190316','190361','190362','190366','190483','190560','190588','190601','190772','190998','191140','191481','191538','191598','191869','191870','191872','191975','192098','192684','193122','194056','194979','195083','195388','195826','196252','196360','196444','197168','197169','197564','197608','197683','197693','197709','197758','197851','197904','197949','197951','197982','197996','197997','198017','198018','198019','198020','198022','198055','198130','198132','198141','198203','198222','198262','198263','198266','198270','198273','198332','198356','198362','198370','198403','198485','198499','198518','198566','198568','198590','198608','198671','198709','198710','198818','198877','198942','199022','199034','199084','199111','199113','199117','199119','199216','199239','199334','199354','199362','199367','199658','199673','199856','199875','199960','200078','200127','200163','200199','200201','200236','200238','200239','200242','200244','200327','200370','200402','200481','200482','200483','200548','200717','200793')",
        });

        // Add trails and style them based on surface type
        const trailsRender = {
            type: "unique-value",
            field: "SURFACE",
            defaultSymbol: {
                color: "#0D6D4A",
                type: "simple-line",
                style: "dot",
                width: "1px"
            },
            uniqueValueInfos: [{
                value: "Asphalt",
                symbol: {
                    color: "#0D6D4A",
                    type: "simple-line",
                    style: "solid",
                    width: "1px"
                }
            }]
        };

        // Create trails feature layer 
        const trails = new FeatureLayer({
            url: "https://services.arcgis.com/rYz782eMbySr2srL/arcgis/rest/services/Trails/FeatureServer/14",
            renderer: trailsRender,
            visible: false,
            listMode: "hide"

        });

        // Define colors for transit lines 
        const colors = ["#422D53", "#3A305A", "#323562", "#354769", "#385D71", "#3A7578", "#3C806F", "#3F8860", "#41904D", "#509843", "#6EA145", "#90A947", "#B1AC48", "#B8924C", "#BC7752", "#C05E59", "#C45F76", "#C8659A", "#CB6CBB", "#C372CF", "#AC79D2", "#9780D6", "#878AD9", "#8EA8DC", "#0D6D4A", "#009E2F", "#06C200", "#54E600", "#B6FF0A", "#FFF82E", "#FFBF52", "#FF9F75", "#FF999B", "#FFBDD4"]
        // Define transit route names
        const transitRouteNames = ["KING", "BARTON", "CANNON", "BAYFRONT", "DELAWARE", "ABERDEEN", "LOCKE", "YORK", "ROCK GARDENS", "B LINE EXPRESS", "PARKDALE", "WENTWORTH", "ANCASTER", "WATERDOWN MOUNTAINEER", "A LINE EXPRESS", "UPPER KENILWORTH", "UPPER OTTAWA", "UPPER GAGE", "UPPER SHERMAN", "UPPER WENTWORTH", "UPPER WELLINGTON", "UPPER JAMES", "SANATORIUM", "UPPER PARADISE", "COLLEGE", "MOHAWK", "MOHAWK EAST", "STONE CHURCH", "RYMAL", "UNIVERSITY", "DUNDAS LOCAL", "STONEY CREEK CENTRAL", "CENTENNIAL", "WATERFRONT SHUTTLE"]

        // Define common properties for transit line symbols
        const commonProperties = {
            type: "simple-line",
            style: "solid",
            width: "2px"
        }

        // Create unique value info for each transit route
        const uniqueValueInfos = transitRouteNames.map((transitRouteNames, index) => ({
            value: transitRouteNames,
            symbol: { ...commonProperties, color: colors[index % colors.length] }
        }));

        // Define renderer for transit layer
        const transitRenderer = {
            type: "unique-value",
            field: "LINE_NAME",
            uniqueValueInfos
        };


        // Define label properties for bus routes
        const transitLabels = {
            symbol: {
                type: "text",
                /*color: "#FFFFFF",*/
                color: { expression: "return colors[$feature.LINE_NAME];" }, // Color based on route name
                haloColor: "white",
                haloSize: "0.5px",
                font: {
                    size: "6px",
                    family: "Candara",
                    style: "italic",
                    weight: "normal"
                }
            },

            labelPlacement: "center-along",
            labelExpressionInfo: {
                expression: "$feature.LINE_NAME"
            }
        };

        // Create transit feature layer
        const transit = new FeatureLayer({
            url: "https://services.arcgis.com/rYz782eMbySr2srL/arcgis/rest/services/HSR_Bus_Routes/FeatureServer/1",
            renderer: transitRenderer,
            visible: false,
            listMode: "hide",
            popupTemplate: {
                title: "{LINE_NUMBER}   { LINE_NAME}" // Popup template for transit lines
            },
            labelingInfo: [transitLabels], // Apply labels to transit lines

        });

        // Define renderer for bike layer
        const bikeRender = {
            type: "simple",
            symbol: {
                color: "#FF99F0",
                type: "simple-line",
                style: "short-dash",
                width: "1px",
            },
        }

        // Create bike feature layer
        const bike = new FeatureLayer({
            url: "https://services.arcgis.com/rYz782eMbySr2srL/arcgis/rest/services/Bikeways/FeatureServer/7",
            renderer: bikeRender,
            visible: false,
            listMode: "hide"
        });

        // Create the map object
        const map = new Map({
            basemap: "osm/streets-relief",
            layers: [transit, bike, trails, buildings], // Add layers to the map
        });

        // Create the map view
        const view = new MapView({
            map: map,
            center: [-79.87203765102602, 43.246307400636745], // Set initial center coordinates
            zoom: 11, // Set initial zoom level
            container: "viewDiv", // Specify the container ID
            constraints: {
                snaptozoom: false,
            }
        });


        //label popup for transit
        view.on("pointer-move", function (event) {
            view.hitTest(event).then(function (response) {
                if (response.results.length) {
                    var graphic = response.results.filter(function (result) {
                        // check if the graphic belongs to the layer of interest 
                        return result.graphic.layer === featureLayer;
                    })[0].graphic;
                    view.openPopup({
                        location: graphic.geometry.centroid,
                        features: [graphic]
                    });
                } else {
                    view.closePopup();
                }
            });
        }); 

        /*  Constrain map view to Hamilton*/
        view.when(() => {
            view.constraints.minScale = view.scale;
        });

        /* Add scalebar widget */
        const scalebar = new ScaleBar({
            view: view
        });
        view.ui.add(scalebar, "bottom-right");

        /* add compass*/
        const compassWidget = new Compass({
            view: view
        });

        view.ui.add(compassWidget, "top-left");

        /* Add current location widget */
        const locate = new Locate({
            view: view,
            useHeadingEnabled: false,
            goToOverride: function (view, options) {
                //AddSelLoc(options.target.geometry.point, "Current Location"); //uses current location, but doesn't have the coordinates yet. 
                options.target.scale = 1500; // Set scale for the view
                return view.goTo(options.target); // Go to the target location
            }
        });
        view.ui.add(locate, "top-left");

        /* Add home button to map, returns to Hamilton */
        const homeBtn = new Home({
            view: view
        });
        view.ui.add(homeBtn, "top-left");

        /* Toggle trails layer */
        const checkboxDiv = document.createElement("div");
        checkboxDiv.className = "esri-widget esri-component";
        checkboxDiv.style.padding = "7px 15px 5px";
        checkboxDiv.innerHTML = '<input type="checkbox" id="trailsLayerToggle" > Trails';
        view.ui.add(checkboxDiv, "top-left");

        const trailsLayerToggle = document.getElementById("trailsLayerToggle");
        trailsLayerToggle.addEventListener("change", () => {
            trails.visible = trailsLayerToggle.checked;
        });

        /* Toggle cycling/biking layer */
        const checkboxDiv2 = document.createElement("div");
        checkboxDiv2.className = "esri-widget esri-component";
        checkboxDiv2.style.padding = "7px 15px 5px";
        checkboxDiv2.innerHTML = '<input type="checkbox" id="bikeLayerToggle" > Biking/Cycling';
        view.ui.add(checkboxDiv2, "top-left");

        const bikeLayerToggle = document.getElementById("bikeLayerToggle");
        bikeLayerToggle.addEventListener("change", () => {
            bike.visible = bikeLayerToggle.checked;
        });

        /* Toggle transit layer */
        const checkboxDiv3 = document.createElement("div");
        checkboxDiv3.className = "esri-widget esri-component";
        checkboxDiv3.style.padding = "7px 15px 5px";
        checkboxDiv3.innerHTML = '<input type="checkbox" id="transitLayerToggle" > Transit';
        view.ui.add(checkboxDiv3, "top-left");

        const transitLayerToggle = document.getElementById("transitLayerToggle");
        transitLayerToggle.addEventListener("change", () => {
            transit.visible = transitLayerToggle.checked;
        });

        /*add Legend to map*/
        const legend = new Expand({
            content: new Legend({
                view: view, // Attach legend to the map view
                style: "card" // Use card style for legend display
            }),
            view: view,
            expanded: false, // Initially expanded
            expandIcon: "key", // Use key icon for expanding/collapsing legend
            expandTooltip: "Show Legend"
        });
                
        view.ui.add(legend, "bottom-left"); // Add legend to the bottom-left corner of the view

        /*Show heritage sites in layer list*/
        const layerList = new Expand({
            content: new LayerList({
                view: view
            }),
            view: view,
            expanded: false,
            expandIcon: "circle-area",
            expandTooltip: "Turn Heritage Sites on/off"
        });

        view.ui.add(layerList, "top-left");

        /* Create a graphics layer for displaying points/markers */
        const graphicsLayer = new GraphicsLayer({
        title: "Heritage Sites"});
        map.add(graphicsLayer);


        /* Function to handle successful data retrieval */
        function onSuccess(result) { AddData(result); }
        /* Function to handle error during data retrieval */
        function onError(result) { alert("Error on Coordinate Entry"); }


        //needed for creating routes
        var pointz = [];
        var pointzpos = 0;
        var stops = 0;

        //Array for filtered selected heritage sites
        var allSites = [];
        var selectedSites = [];

        //Add selected heritage site type data to global allSites array
        function AddData(TheData) {
            for (let i = 0; i < TheData.length; ++i) {
                allSites.push(TheData[i]);
            }
        }

        //Function to display results after selection
        function DoneSelection(evt) {

            disableThreeStopsClick();  //disables all buttons with one click but duplicates if all buttons arent disabled on first click
            disableFourStopsClick();
            disableFiveStopsClick();
            disableSixStopsClick();
            disableSevenStopsClick();
            disableEightStopsClick();
            disableNineStopsClick();
            disableTenStopsClick();

            //Randomize index of selected sites array to use
            for (let i = 0; i < evt.currentTarget.myParam && i < allSites.length; ++i) {
                let randomIndex = Math.floor(Math.random() * (allSites.length - 1));
                selectedSites.push(allSites[randomIndex]);
                delete allSites[randomIndex];
            }

            // Iterate through the selected site data
            for (let i = 0; i < evt.currentTarget.myParam && i < selectedSites.length; ++i) {

                let tempArray = selectedSites[i].split("|");
                // Define a point geometry based on the longitude and latitude
                let point = {
                    type: "point",
                    longitude: parseFloat(tempArray[2]),
                    latitude: parseFloat(tempArray[1])
                };

                // Define a simple marker symbol for the point
                let simpleMarkerSymbol = {
                    type: "simple-marker",
                    color: [142, 94, 245, 0.75],  // Purple color with opacity
                    outline: {
                        color: [255, 255, 255], // White outline
                        width: 1
                    }

                };

                //4=streetNo1, 5=StreetName, 6=Community, 
                let address = ('Address: ' + tempArray[4] + ' ' + tempArray[5] + ', ' + tempArray[6]);

                AddSelLoc(point, tempArray[3]);
                // Create a popup template for the point
                let popupTemplate = {
                    title: tempArray[3],
                    content: address
                };

                // Create a graphic object for the point with symbol and popup template
                let pointGraphic = new Graphic({
                    geometry: point,
                    symbol: simpleMarkerSymbol,
                    popupTemplate: popupTemplate
                });
                // Add the graphic to the graphics layer
                graphicsLayer.add(pointGraphic);
            }
        }
        // Event listener for DoneSelection button
        function disableThreeStopsClick() { 
            let button = document.getElementById("ThreeStops");
            button.removeEventListener("click", DoneSelection);
            button.disabled=true;
        }

        function enableThreeStopsClick() {
            let button = document.getElementById("ThreeStops");
            button.disabled = false;
            button.removeEventListener("click", DoneSelection);
            button.addEventListener("click", DoneSelection);
            button.myParam = 3;
        }
        enableThreeStopsClick();

        function disableFourStopsClick() {
            let button = document.getElementById("FourStops");
            button.removeEventListener("click", DoneSelection);
            button.disabled = true;
        }

        function enableFourStopsClick() {
            let button = document.getElementById("FourStops");
            button.disabled = false;
            button.removeEventListener("click", DoneSelection);
            button.addEventListener("click", DoneSelection);
            button.myParam = 4;
        }
        enableFourStopsClick();

        function disableFiveStopsClick() {
            let button = document.getElementById("FiveStops");
            button.removeEventListener("click", DoneSelection);
            button.disabled = true;
        }

        function enableFiveStopsClick() {
            let button = document.getElementById("FiveStops");
            button.disabled = false;
            button.removeEventListener("click", DoneSelection);
            button.addEventListener("click", DoneSelection);
            button.myParam = 5;
        }
        enableFiveStopsClick();

        function disableSixStopsClick() {
            let button = document.getElementById("SixStops");
            button.removeEventListener("click", DoneSelection);
            button.disabled = true;
        }

        function enableSixStopsClick() {
            let button = document.getElementById("SixStops");
            button.disabled = false;
            button.removeEventListener("click", DoneSelection);
            button.addEventListener("click", DoneSelection);
            button.myParam = 6;
        }
        enableSixStopsClick();

        function disableSevenStopsClick() {
            let button = document.getElementById("SevenStops");
            button.removeEventListener("click", DoneSelection);
            button.disabled = true;
        }

        function enableSevenStopsClick() {
            let button = document.getElementById("SevenStops");
            button.disabled = false;
            button.removeEventListener("click", DoneSelection);
            button.addEventListener("click", DoneSelection);
            button.myParam = 7;
        }
        enableSevenStopsClick();

        function disableEightStopsClick() {
            let button = document.getElementById("EightStops");
            button.removeEventListener("click", DoneSelection);
            button.disabled = true;
        }

        function enableEightStopsClick() {
            let button = document.getElementById("EightStops");
            button.disabled = false;
            button.removeEventListener("click", DoneSelection);
            button.addEventListener("click", DoneSelection);
            button.myParam = 8;
        }
        enableEightStopsClick();

        function disableNineStopsClick() {
            let button = document.getElementById("NineStops");
            button.removeEventListener("click", DoneSelection);
            button.disabled = true;
        }

        function enableNineStopsClick() {
            let button = document.getElementById("NineStops");
            button.disabled = false;
            button.removeEventListener("click", DoneSelection);
            button.addEventListener("click", DoneSelection);
            button.myParam = 9;
        }
        enableNineStopsClick();

        function disableTenStopsClick() {
            let button = document.getElementById("TenStops");
            button.removeEventListener("click", DoneSelection);
            button.disabled = true;
        }

        function enableTenStopsClick() {
            let button = document.getElementById("TenStops");
            button.disabled = false;
            button.removeEventListener("click", DoneSelection);
            button.addEventListener("click", DoneSelection);
            button.myParam = 10;
        }
        enableTenStopsClick();

        //allows for the current location to be an option in the route.
        //currently doesnt quite work when used.

        // Function to add selected location
        function AddSelLoc(point, name) {
            // Get references to dropdown lists for origin, destination, and stops
            select1 = document.getElementById("SelOrig");
            select2 = document.getElementById("SelDes");
            select3 = document.getElementById("Stop2");
            select4 = document.getElementById("Stop3");
            select5 = document.getElementById("Stop4");
            select6 = document.getElementById("Stop5");
            select7 = document.getElementById("Stop6");
            select8 = document.getElementById("Stop7");
            select9 = document.getElementById("Stop8");
            select10 = document.getElementById("Stop9");


            //start
            // Store the selected location in the points array
            pointz[pointzpos] = point;
            // Create option elements for each dropdown list and populate them with the selected location
            // For origin dropdown list
            var opt1 = document.createElement('option');
            opt1.value = pointzpos;
            opt1.innerHTML = name;//show name in box
            select1.appendChild(opt1);

            // For destination dropdown list
            var opt2 = document.createElement('option');
            opt2.value = pointzpos;
            opt2.innerHTML = name;
            select2.appendChild(opt2);

            // stop 2
            var opt3 = document.createElement('option');
            opt3.value = pointzpos;
            opt3.innerHTML = name;
            select3.appendChild(opt3);

            // stop 3
            var opt4 = document.createElement('option');
            opt4.value = pointzpos;
            opt4.innerHTML = name;
            select4.appendChild(opt4);

            // stop 4
            pointz[pointzpos] = point;
            var opt5 = document.createElement('option');
            opt5.value = pointzpos;
            opt5.innerHTML = name;//show name in box
            select5.appendChild(opt5);

            // stop 5
            var opt6 = document.createElement('option');
            opt6.value = pointzpos;
            opt6.innerHTML = name;
            select6.appendChild(opt6);

            // stop 6
            var opt7 = document.createElement('option');
            opt7.value = pointzpos;
            opt7.innerHTML = name;
            select7.appendChild(opt7);

            // stop 7
            var opt8 = document.createElement('option');
            opt8.value = pointzpos;
            opt8.innerHTML = name;
            select8.appendChild(opt8);

            // stop 8
            var opt9 = document.createElement('option');
            opt9.value = pointzpos;
            opt9.innerHTML = name;
            select9.appendChild(opt9);

            // stop 9
            var opt10 = document.createElement('option');
            opt10.value = pointzpos;
            opt10.innerHTML = name;
            select10.appendChild(opt10);
            pointzpos += 1; //only on the last one

        }

        // Function to add the current location as the first point for the route
        function addCurrentLocationAsStartingPoint(event) {
            // Prevent the default behavior of the button click event (page reload)
            event.preventDefault();

            // Retrieve the current geolocation of the user
            navigator.geolocation.getCurrentPosition(function (position) {
                // Extract longitude and latitude coord
                const currentLocation = {
                    type: "point",
                    longitude: position.coords.longitude,
                    latitude: position.coords.latitude
                };

                // Insert the current location as the first point in the array
                pointz.unshift(currentLocation);

                // Update the route based on the change
                changeRoute();
            });
        }

        // Call the function to add the current location when needed
        // For example, you can add it to a button click event:
        document.getElementById("addCurrentLocationButton").addEventListener("click", addCurrentLocationAsStartingPoint);


        //function that makes extra stop selection boxes appear
        function AddStop() {//only have 8 inner (origin(1),2-9,dest(10) to max at 10 total stops
            switch (stops) {
                case 0:
                    document.getElementById("Stop2").style.display = "block";
                    stops++;
                    changeRoute();
                    break;
                case 1:
                    document.getElementById("Stop3").style.display = "block";
                    stops++;
                    changeRoute();
                    break;
                case 2:
                    document.getElementById("Stop4").style.display = "block";
                    stops++;
                    changeRoute();
                    break;
                case 3:
                    document.getElementById("Stop5").style.display = "block";
                    stops++;
                    changeRoute();
                    break;
                case 4:
                    document.getElementById("Stop6").style.display = "block";
                    stops++;
                    changeRoute();
                    break;
                case 5:
                    document.getElementById("Stop7").style.display = "block";
                    stops++;
                    changeRoute();
                    break;
                case 6:
                    document.getElementById("Stop8").style.display = "block";
                    stops++;
                    changeRoute();
                    break;
                case 7:
                    document.getElementById("Stop9").style.display = "block";
                    stops++;
                    changeRoute();
                    break;
            }

        }
        // Event listener for adding a stop
        document.getElementById("AddStop").addEventListener("click", AddStop);

        // Function to remove a stop
        function RemoveStop() {
            //only have 8 inner (origin(1),2-9,dest(10) to max at 10 total stops . one above, bringing back, so cases 1-10
            switch (stops) {
                case 1:
                    document.getElementById("Stop2").style.display = "none";
                    stops--;
                    changeRoute();
                    break;
                case 2:
                    document.getElementById("Stop3").style.display = "none";
                    stops--;
                    changeRoute();
                    break;
                case 3:
                    document.getElementById("Stop4").style.display = "none";
                    stops--;
                    changeRoute();
                    break;
                case 4:
                    document.getElementById("Stop5").style.display = "none";
                    stops--;
                    changeRoute();
                    break;
                case 5:
                    document.getElementById("Stop6").style.display = "none";
                    stops--;
                    changeRoute();
                    break;
                case 6:
                    document.getElementById("Stop7").style.display = "none";
                    stops--;
                    changeRoute();
                    break;
                case 7:
                    document.getElementById("Stop8").style.display = "none";
                    stops--;
                    changeRoute();
                    break;
                case 8:
                    document.getElementById("Stop9").style.display = "none";
                    stops--;
                    changeRoute();
                    break;
            }
        }
        // Event listener for removing a stop
        document.getElementById("RemoveStop").addEventListener("click", RemoveStop);


        // MAIN ROUTE CODE ******************************************************************************

        // Main route URL for routing service
        const routeUrl = "https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World";

        //populates combobox. working to get the middle stops to populate
        // Function to handle the user changing the route
        function changeRoute() {
            // Check if there are points available for route calculation
            if (pointzpos == 0)
                return; //no point = no change
            // Get selected elements from dropdown lists
            select1 = document.getElementById("SelOrig");
            select2 = document.getElementById("SelDes");
            select3 = document.getElementById("Stop2");
            select4 = document.getElementById("Stop3");
            select5 = document.getElementById("Stop4");
            select6 = document.getElementById("Stop5");
            select7 = document.getElementById("Stop6");
            select8 = document.getElementById("Stop7");
            select9 = document.getElementById("Stop8");
            select10 = document.getElementById("Stop9");

            // Map the route based on selected points
            mapmyroute(pointz[select1.value], pointz[select2.value], pointz[select3.value], pointz[select4.value],
                pointz[select5.value], pointz[select6.value], pointz[select7.value], pointz[select8.value], pointz[select9.value], pointz[select10.value]);
        }

        // Event listeners for dropdown list changes
        document.getElementById("SelOrig").addEventListener("change", changeRoute);
        document.getElementById("SelDes").addEventListener("change", changeRoute);
        document.getElementById("Stop2").addEventListener("change", changeRoute);
        document.getElementById("Stop3").addEventListener("change", changeRoute);
        document.getElementById("Stop4").addEventListener("change", changeRoute);
        document.getElementById("Stop5").addEventListener("change", changeRoute);
        document.getElementById("Stop6").addEventListener("change", changeRoute);
        document.getElementById("Stop7").addEventListener("change", changeRoute);
        document.getElementById("Stop8").addEventListener("change", changeRoute);
        document.getElementById("Stop9").addEventListener("change", changeRoute);

        // Function to map the route between selected locations
        function mapmyroute(orig, dest, stop2, stop3, stop4, stop5, stop6, stop7, stop8, stop9) {
            // Clear existing graphics
            view.graphics.removeAll();
            // Add graphics for each stop in the route
            addGraphic("origin", orig);
            if (stops >= 1) addGraphic("st2", stop2);
            if (stops >= 2) addGraphic("st3", stop3);
            if (stops >= 3) addGraphic("st4", stop4);
            if (stops >= 4) addGraphic("st5", stop5);
            if (stops >= 5) addGraphic("st6", stop6);
            if (stops >= 6) addGraphic("st7", stop7);
            if (stops >= 7) addGraphic("st8", stop8);
            if (stops >= 8) addGraphic("st9", stop9);
            addGraphic("destination", dest);
            // Calculate and display the route
            getRoute();
        }

        // Function to add a graphic to the view
        function addGraphic(type, point) {
            var gcolor = "grey"; // catches missed/default
            if (type === "origin") {
                gcolor = "white"; // Color for origin
            }
            else if (type === "destination") {
                gcolor = "black"; // Color for destination
            }

            const graphic = new Graphic({
                symbol: {
                    type: "simple-marker",
                    color: gcolor, //makes first a different colour
                    size: "10px"
                },
                geometry: point
            });
            view.graphics.add(graphic);
        }

        // Function to calculate and display the route
        function getRoute() {
            const routeParams = new RouteParameters({
                stops: new FeatureSet({
                    features: view.graphics.toArray()
                }),

                returnDirections: true,
                /*travelMode: driveTimeTravelMode*/

            });

            route.solve(routeUrl, routeParams)
                .then(function (data) {
                    data.routeResults.forEach(function (result) {
                        result.route.symbol = {
                            type: "simple-line",
                            color: [5, 150, 255],
                            width: 3
                        };
                        view.graphics.add(result.route);
                    });

                    // Display directions
                    if (data.routeResults.length > 0) {
                        const directions = document.createElement("ol");
                        directions.classList = "esri-widget esri-widget--panel esri-directions__scroller";
                        directions.style.marginTop = "0";
                        directions.style.padding = "15px 15px 15px 30px";
                        const features = data.routeResults[0].directions.features;

                        // Show each direction with distance in kilometers
                        // ESRI uses Miles by default so this was converted to km
                        features.forEach(function (result, i) {
                            const distanceInMiles = result.attributes.length; // Distance in miles
                            const distanceInKilometers = distanceInMiles * 1.60934; // Convert miles to kilometers
                            const direction = document.createElement("li");
                            direction.innerHTML = result.attributes.text + " (" + distanceInKilometers.toFixed(2) + " km)"; // Display distance in kilometers
                            directions.appendChild(direction);
                        });

                        // Display the directions in the top right
                        view.ui.empty("top-right");
                        view.ui.add(directions, "top-right");
                    }
                })

                .catch(function (error) {
                    console.log(error);
                })

        }

        //if stop 2 visible, then add

        //GET HERITAGE SITE TYPES

        // CLEAR THE MAP *******************************************************************************************************************
        // This function removes all graphics and resets the UI elements
        function ClearMap() {
            // Remove graphics from the map
            graphicsLayer.removeAll();
            // Clear dropdown lists
            select1 = document.getElementById("SelOrig");
            select2 = document.getElementById("SelDes");
            select3 = document.getElementById("Stop2");
            select4 = document.getElementById("Stop3");
            select5 = document.getElementById("Stop4");
            select6 = document.getElementById("Stop5");
            select7 = document.getElementById("Stop6");
            select8 = document.getElementById("Stop7");
            select9 = document.getElementById("Stop8");
            select10 = document.getElementById("Stop9");

            while (select1.options.length) select1.options.remove(0); //clears combo box
            while (select2.options.length) select2.options.remove(0);
            while (select3.options.length) select3.options.remove(0);
            while (select4.options.length) select4.options.remove(0);
            while (select5.options.length) select5.options.remove(0);
            while (select6.options.length) select6.options.remove(0);
            while (select7.options.length) select7.options.remove(0);
            while (select8.options.length) select8.options.remove(0);
            while (select9.options.length) select9.options.remove(0);
            while (select10.options.length) select10.options.remove(0);

            // Remove routes and directions
            view.graphics.removeAll();//remove line
            view.ui.empty("top-right");//remove direction box
            // Reset stop counter
            pointzpos = 0;
            // Remove event listeners and reset button states
            while (stops > 0) RemoveStop();
            enableResidencesClick();
            enableFarmsClick();
            enableSchoolsClick();
            enableChurchesClick();
            enableAntiqueShopsClick();
            enableTheatresClick();
            enableParkandGardensClick();
            enableCemeteryClick();
            enableHospitalsClick();
            enableMuseumsClick();
            enableOtherClick();
            enableThreeStopsClick();
            enableFourStopsClick();
            enableFiveStopsClick();
            enableSixStopsClick();
            enableSevenStopsClick();
            enableEightStopsClick();
            enableNineStopsClick();
            enableTenStopsClick();

            // Remove the "selected" class from all buttons, when the user uses the ClearMap function, the button colour will return to default
            var buttons = document.querySelectorAll('.location-button');
            buttons.forEach(function (button) {
                button.classList.remove('selected');
            });

            allSites = [];
            selectedSites = [];
        }
        // Event listener for Clear button
        document.getElementById("Clear").addEventListener("click", ClearMap);




        // ALL LOCATION BUTTONS ***************************************************************************************************
        /*Residences*/
        // Function to handle clicks on residences button
        function handleResidencesClick() {
            let Message = "Residences";
            PageMethods.GetData(Message, onSuccess, onError);
            disableResidencesClick();
        }

        // Function to disable residences button after click
        function disableResidencesClick() {
            document.getElementById("Residences").removeEventListener("click", handleResidencesClick);
        }

        // Function to enable residences button
        function enableResidencesClick() {
            document.getElementById("Residences").addEventListener("click", handleResidencesClick);
        }

        // Enable residences button initially
        enableResidencesClick();


        /*Farms*/
        // Function to handle clicks on Farms button
        function handleFarmsClick() {
            let Message = "Farms";
            // Send request to retrieve Farms data
            PageMethods.GetData(Message, onSuccess, onError);
            // Disable Farms button after click to prevent duplicate requests
            disableFarmsClick();
        }

        // Function to disable Farms button after click
        function disableFarmsClick() {
            document.getElementById("Farms").removeEventListener("click", handleFarmsClick);
        }

        // Function to enable Farms button
        function enableFarmsClick() {
            document.getElementById("Farms").addEventListener("click", handleFarmsClick);
        }

        // Enable Farms button initially
        enableFarmsClick();


        /* Schools*/
        function handleSchoolsClick() {
            let Message = "Schools";
            PageMethods.GetData(Message, onSuccess, onError);
            disableSchoolsClick();
        }

        function disableSchoolsClick() {
            document.getElementById("Schools").removeEventListener("click", handleSchoolsClick);
        }

        function enableSchoolsClick() {
            document.getElementById("Schools").addEventListener("click", handleSchoolsClick);
        }

        enableSchoolsClick();


        /*Churches*/
        function handleChurchesClick() {
            let Message = "Churches";
            PageMethods.GetData(Message, onSuccess, onError);
            disableChurchesClick();
        }

        function disableChurchesClick() {
            document.getElementById("Churches").removeEventListener("click", handleChurchesClick);
        }

        function enableChurchesClick() {
            document.getElementById("Churches").addEventListener("click", handleChurchesClick);
        }

        enableChurchesClick();


        /*AntiqueShops*/
        function handleAntiqueShopsClick() {
            let Message = "AntiqueShops";
            PageMethods.GetData(Message, onSuccess, onError);
            disableAntiqueShopsClick();
        }

        function disableAntiqueShopsClick() {
            document.getElementById("AntiqueShops").removeEventListener("click", handleAntiqueShopsClick);
        }

        function enableAntiqueShopsClick() {
            document.getElementById("AntiqueShops").addEventListener("click", handleAntiqueShopsClick);
        }

        enableAntiqueShopsClick();


        /*  Theatres*/
        function handleTheatresClick() {
            let Message = "Theatres";
            PageMethods.GetData(Message, onSuccess, onError);
            disableTheatresClick();
        }

        function disableTheatresClick() {
            document.getElementById("Theatres").removeEventListener("click", handleTheatresClick);
        }

        function enableTheatresClick() {
            document.getElementById("Theatres").addEventListener("click", handleTheatresClick);
        }

        enableTheatresClick();


        /* Parks and Gardens*/
        function handleParkandGardensClick() {
            let Message = "ParkandGardens";
            PageMethods.GetData(Message, onSuccess, onError);
            disableParkandGardensClick();
        }

        function disableParkandGardensClick() {
            document.getElementById("ParkandGardens").removeEventListener("click", handleParkandGardensClick);
        }

        function enableParkandGardensClick() {
            document.getElementById("ParkandGardens").addEventListener("click", handleParkandGardensClick);
        }

        enableParkandGardensClick();

        /* Cemetery and Funeral Homes*/
        function handleCemeteryClick() {
            let Message = "CemeteryandFuneralHomes";
            PageMethods.GetData(Message, onSuccess, onError);
            disableCemeteryClick();
        }

        function disableCemeteryClick() {
            document.getElementById("CemeteryandFuneralHomes").removeEventListener("click", handleCemeteryClick);
        }

        function enableCemeteryClick() {
            document.getElementById("CemeteryandFuneralHomes").addEventListener("click", handleCemeteryClick);
        }

        enableCemeteryClick();



        /*  Hospitals*/
        function handleHospitalsClick() {
            let Message = "Hospitals";
            PageMethods.GetData(Message, onSuccess, onError);
            disableHospitalsClick();
        }

        function disableHospitalsClick() {
            document.getElementById("Hospitals").removeEventListener("click", handleHospitalsClick);
        }

        function enableHospitalsClick() {
            document.getElementById("Hospitals").addEventListener("click", handleHospitalsClick);
        }

        enableHospitalsClick();

        /*  Museums*/
        function handleMuseumsClick() {
            let Message = "Museums";
            PageMethods.GetData(Message, onSuccess, onError);
            disableMuseumsClick();
        }

        function disableMuseumsClick() {
            document.getElementById("Museums").removeEventListener("click", handleMuseumsClick);
        }

        function enableMuseumsClick() {
            document.getElementById("Museums").addEventListener("click", handleMuseumsClick);
        }

        enableMuseumsClick();

        /*  Other*/
        function handleOtherClick() {
            let Message = "Other";
            PageMethods.GetData(Message, onSuccess, onError);
            disableOtherClick();
        }

        function disableOtherClick() {
            document.getElementById("Other").removeEventListener("click", handleOtherClick);
        }

        function enableOtherClick() {
            document.getElementById("Other").addEventListener("click", handleOtherClick);
        }

        enableOtherClick();

                

    });

// After the user clicks a button the first time, the button will be disabled an appear greyed out ********************************
// If the user would like to remove this selection, they will need to use the ClearMap
function toggleSelected(buttonId) {
    var button = document.getElementById(buttonId);
    if (!button.classList.contains("selected")) {
        button.classList.add("selected");
       /* button.disabled = true; // Disable the button*/
    }
}



